@page "/flights"

@*Flight Finder dropdown*@
<h4 class="text-center my-2">Flight Finder</h4>
<div class="d-flex flex-nowrap justify-content-between gap-4">
	<div class="w-25">
		<label>From: </label>
		<select class="form-select" @bind="from">
			<option value="Any">Any</option>
			@foreach (Airport airport in airportList)
			{
				<option value="@airport.Code" placeholder="Any">@airport.Name</option>
			}
		</select>
	</div>

	<div class="w-25">
		<label>To: </label>
		<select class="form-select" @bind="to">
			<option value="Any">Any</option>
			@foreach (Airport airport in airportList)
			{
				<option value="@airport.Code" placeholder="Any">@airport.Name</option>
			}
		</select>
	</div>

	<div class="w-25">
		<label>Day:</label>
		<select class="form-select" @bind="filterDay">
			@foreach (string day in days)
			{
				<option>@day</option>
			}
		</select>

	</div>

	<div class="w-25">
		<label></label>
		<button type="submit" class="btn btn-primary w-100" @onclick="Filter">Find Flights</button>
	</div>
</div>


<h4 class="text-center mt-5 mb-2">Flights</h4>
<div>
	@if (filter == 0)
	{
		<select class="form-select">
			<option>Loading...</option>
		</select>
	}
	else
	{
		<select class="form-select" @bind="selected">
			<option disabled selected></option>
			@foreach (Flight flight in flights)
			{
				<option>@flight</option>
			}
		</select>
		if(!String.IsNullOrEmpty(selected))
		{
			Select();
		}
	}
</div>

<h4 class="text-center mt-5 mb-0">Reserve</h4>
<div>
	<div class="form-group">
		<label>Flight code: </label>
		<input type="text" class="form-control" placeholder="Flight Code" @bind="fCode" style="background-color:white;" readonly />
	</div>

	<div class="form-group">
		<label>Airline: </label>
		<input type="text" class="form-control" placeholder="Airline" @bind="fName" style="background-color:white;" readonly />
	</div>

	<div class="form-group">
		<label>Day: </label>
		<input type="text" class="form-control" placeholder="Day" @bind="fDay" style="background-color:white;" readonly />
	</div>

	<div class="form-group">
		<label>Time: </label>
		<input type="text" class="form-control" placeholder="Time" @bind="fTime" style="background-color:white;" readonly />
	</div>

	<div class="form-group">
		<label>Cost: </label>
		<input type="text" class="form-control" placeholder="Cost" @bind="cost" style="background-color:white;" readonly />
	</div>

	<div class="form-group">
		<label>Name: </label>
		<input type="text" class="form-control" placeholder="Name" @bind="name"/>
	</div>

	<div class="form-group">
		<label>Citizenship</label>
		<input type="text" class="form-control" placeholder="Citizenship" @bind="citizenship" />
	</div>
</div>
<div class="d-flex flex-column justify-content-between align-items-center">
	<button type="submit" class="btn btn-primary my-3" @onclick="Reserve"  style="width: 200px;">Reserve</button>
	<label class="mb-2 fs-6" >Reservation Code: @reservationCode </label>
	<span style="color: orangered" >@message</span>
</div>



@code {
	List<Flight> allFlights = FlightManager.AddFlights();

	// for dropdown list of airports
	List<Airport> airportList = AirportManager.GetAirports(); 
	AirportManager airportManager = new AirportManager();

	//for dropdown list of days
	string[] days = { "Any", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };

	//Filter attributes
	string from = "Any";
	string to="Any";
	string filterDay = "Any";
	int filter = 0;
	List<Flight> flights;

	//Calling the findFlight() method in flightmanager
	private void Filter()
	{
		try
		{
			Clear();
			flights=FlightManager.FindFlights(from, to, filterDay);
			filter++;

		}
		catch(Exception e)
		{
			message = e.Message;
		}
	}

	//Adding content to reserve
	string selected;
	Flight selectedFlight;
	string fCode;
	string fName;
	string fDay;
	string fTime;
	double cost;
	string name;
	string citizenship;

	//Gives the fields the data and also creates a flight object of that fight 
	private void Select()
	{
		string[] parts = selected.Split(',');
		fCode = parts[0];
		fName = parts[1];
		fDay = parts[4];
		fTime = parts[5];
		cost = Convert.ToDouble(parts[7]);
		selectedFlight = new Flight(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], Convert.ToInt32(parts[6]), Convert.ToDouble(parts[7]));//Creation of new flight
	}

	//Method to clear the fields
	private void Clear()
	{
		selected = null;
		selectedFlight=null;
		fCode = null;
		fName = null;
		fDay = null;
		fTime = null;
		cost = 0;
		name = null;
		citizenship = null;
	}

	string reservationCode = "";
	string message = "";

	private void Reserve(){
		try
		{
			ReservationManager.CheckInformation(name, citizenship);
			reservationCode = ReservationManager.GenerateReservationCode();
			ReservationManager.MakeReservation(reservationCode, name, citizenship, selectedFlight);
			FlightManager.ReduceSeat(selectedFlight.FlightCode, allFlights);
			FlightManager.WriteFlight(allFlights);
			Clear();
			message = "Flight reserved";			
		}
		catch(Exception e)
		{
			message = e.Message;
		}
	}
}
